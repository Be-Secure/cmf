import numpy as np
import torch
from .strategy import Strategy

class EntropySamplingDropout(Strategy):
    def __init__(self, dataset, net, n_drop=10):
        super(EntropySamplingDropout, self).__init__(dataset, net)
        self.n_drop = n_drop

    def query(self, n):
        unlabeled_idxs, unlabeled_data = self.dataset.get_unlabeled_data()
        probs = self.predict_prob_dropout(unlabeled_data, n_drop=self.n_drop)
        log_probs = torch.log(probs)
        uncertainties = (probs*log_probs).sum(1)
        return unlabeled_idxs[uncertainties.sort()[1][:n]]

    def query_probs(self, n):
        unlabeled_idxs, unlabeled_data = self.dataset.get_unlabeled_data_subset(0.0001)
        probs = self.predict_prob_dropout(unlabeled_data, n_drop=self.n_drop)
        print("printing probability of zero index")
        print(probs[0])

        log_probs = torch.log(probs)

        print("printing log probability of zero index")
        print(log_probs[0])
        uncertainties = (probs*log_probs).sum(1)

        print("printing size of uncertainities")
        print(uncertainties.size())

        print("printing  uncertainities of 0")
        print(uncertainties[0])

        print("printing  sorted ncertainities ")

        print(uncertainties.sort())
        #print(uncertainties.sort()[1][:n])

        print("printing  unlabeled_idx[sorted ncertainities] ")
        print(unlabeled_idxs[uncertainties.sort()[1][:n]])
        #return unlabeled_idxs[uncertainties.sort()[1][:n]]
        t = torch.zeros([2,len(unlabeled_idxs)])
        print(t)
        t[0] = torch.from_numpy(unlabeled_idxs[uncertainties.sort()[1][:n]])
        t[1] = uncertainties.sort()[0][:n]
        print(t)
        #t = torch.cat(( torch.from_numpy(unlabeled_idxs[uncertainties.sort()[1][:n]]), uncertainties.sort()[0][:n]), 0)
        #print(t)
        return unlabeled_idxs[uncertainties.sort()[1][:n]]

